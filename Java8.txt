get a taste of lambdas and get addicted to streams by Venkat Subramaniam :: https://www.youtube.com/watch?v=1OpAgZvYXLQ
Parallel and Asynchronous Programming with Streams and CompletableFuture by Venkat Subramaniam :: https://www.youtube.com/watch?v=IwJ-SCfXoAU

For lamda expressions and method reference
https://www.codementor.io/eh3rrera/using-java-8-method-reference-du10866vx

There are four types of method references:
1) A method reference to a static method. 
2) A method reference to an instance method of an object of a particular type. 
	s -> s.calculateWeight()
	Shipment::calculateWeight
	
	(Sum s, String arg1, String arg2) -> s.doSum(arg1, arg1)
	Sum::doSum
3) A method reference to an instance method of an existing object.
	obj::instanceMethod
4) A method reference to a constructor.

http://winterbe.com/posts/2014/03/16/java-8-tutorial/

Important points :
--------------------------------------------------------------------------
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| ANONYMOUS INNER CLASS                                                       |                         LAMBDA EXPRESSION                         |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| It is a class without name.                                                 | It is a method without name.(anonymous function)                  |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| It can extend abstract and concrete class.                                  | It can’t extend abstract and concrete class.                      |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| It can implement an interface that contains any number of abstract methods. | It can implement an interface which contains a single abstract    |
|                                                                             |  methods.                                                         |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| Inside this we can declare instance variables.                              | It does not allow declaration of instance variables, whether the  |
|                                                                             | variables declared simply act as local variables.                 |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| Inside Anonymous inner class, “this” always refers to current anonymous     | Inside Lambda Expression, “this” always refers to current outer   |
| inner class object but not to outer object.                                 | class object that is, enclosing class object.                     |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| At the time of compilation, a separate .class file will be generated.       | At the time of compilation, no separate .class file will be gener |
|                                                                             | ated. It simply convert it into private method outer class.       |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+
| Memory allocation is on demand, whenever we are creating an object.         | It resides in a permanent memory of JVM.                          |
+-----------------------------------------------------------------------------+-------------------------------------------------------------------+

At runtime anonymous inner classes require class loading, memory allocation, and object initialization and invocation of a non-static method while lambda expression is a compile-time activity and don’t incur extra cost during runtime. So the performance of lambda expression is better as compare to anonymous inner classes.

What is invoke dynamic?(Which is bytecode instrumentation introduced in java 7)
Collections are in-memory data structure to hold values where as Streams are data structure that is computed on demand.
effective final in java 8. (A variable or parameter whose value is never changed after it is initialized is effectively final.)
effective final variable in anonymous inner classes


https://www.journaldev.com/2389/java-8-features-with-examples#java8-core
Some of the important Java 8 features are;
--------------------------------------------------------------------------
forEach() method in Iterable interface
default and static methods in Interfaces
Functional Interfaces and Lambda Expressions
Java Stream API for Bulk Data Operations on Collections
Java Time API
Collection API improvements
Concurrency API improvements
Java IO improvements
Miscellaneous Core API improvements
StringJoiner, Entry.compareByValue, compareByKey, 
Integer::sum

Some misc API improvements that might come handy are:
--------------------------------------------------------------------------
ThreadLocal static method withInitial(Supplier supplier) to create instance easily.
Comparator interface has been extended with a lot of default and static methods for natural ordering, reverse order etc.
min(), max() and sum() methods in Integer, Long and Double wrapper classes.
logicalAnd(), logicalOr() and logicalXor() methods in Boolean class.
ZipFile.stream() method to get an ordered Stream over the ZIP file entries. Entries appear in the Stream in the order they appear in the central directory of the ZIP file.
Several utility methods in Math class.
jjs command is added to invoke Nashorn Engine.
jdeps command is added to analyze class files
JDBC-ODBC Bridge has been removed.
PermGen memory space has been removed

Streams:
========
Functional interfaces in streams:

+-------------+--------------------------------------+---------+
| Function    |   Takes one arg and returns a value  |         |
+-------------+--------------------------------------+         |
| BiFunction  |  Takes two args and returns a value  | apply() |
+-------------+--------------------------------------+         |
| TriFunction | Takes three args and returns a value |         |
+-------------+--------------------------------------+---------+
`

+--------------+--------------------------------------+--------+
| Predicate    |   Takes one arg and returns boolean  |        |
+--------------+--------------------------------------+        |
| BiPredicate  |  Takes two args and returns boolean  | test() |
+--------------+--------------------------------------+        |
| TriPredicate | Takes three args and returns boolean |        |
+--------------+--------------------------------------+--------+


+----------+-----------------------------------+-------+
| Supplier | Takes nothing but returns a value | get() |
+----------+-----------------------------------+-------+


+-------------+--------------------------------------+----------+
| Consumer    |   Takes an arg and returns nothing   |          |
+-------------+--------------------------------------+          |
| BiConsumer  | Takes two args and returns nothing   |          |
+-------------+--------------------------------------+ accept() |
| TriConsumer | Takes three args and returns nothing |          |
+-------------+--------------------------------------+----------+

* filter, forEach(Collection, Map), map, mapToObj, flatMap, sorted, distinct, reduce
* Collectors - toList, toMap, groupingBy, PartitioningBy, counting, averagingXXX, max, min, summarizingStatistics
* Sequential and Parallel streams
* Parallel and forEachOrdered combination is valid.
* Parallel and reduce conmbination is danger, need to take care.